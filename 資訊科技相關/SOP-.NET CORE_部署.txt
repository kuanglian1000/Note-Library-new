
=開發階段=
  在 ASP.NET Core 中使用多個環境(以下內容僅適用於開發環境, 正式環境的 系統環境變數<environment variable> 會寫在 "Web.config" 設定檔裡面)
  https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/environments?view=aspnetcore-7.0

    dotnet run --environment Production (直接在命令列上指定 "執行環境變數<hosting environment>", 但系統環境變數<environment variable> "ASPNETCORE_ENVIRONMENT" 值不會改變, 因為它是固定的. )
    dotnet run (未指定 "執行環境變數<hosting environment>", 啟動時抓 # launchSettings.json 系統環境變數<environment variable> #, 作為 "執行環境變數<hosting environment>")
    dotnet run or dotnet run --launch-profile "IIS Express" or dotnet run --launch-profile "IIS"
      IISExpress：啟動IIS Express。
      IIS ：未啟動網頁伺服器。 IIS 預期可供使用。
      Project ：啟動 Kestrel 。

      --系統環境變數<environment variable>
        # launchSettings.json 程式片段(此檔僅適用在開發環境) #
          "NET6_MvcShopping": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": true,
            "applicationUrl": "https://localhost:7184;http://localhost:5034",
            "environmentVariables": {
              "ASPNETCORE_ENVIRONMENT": "Development" //系統環境變數<environment variable>在這裡
            }

      --上述指令指定 執行環境變數<hosting environment>='Production' 來執行程式, 所以 builder 會使用 "StoreContext-Prod" 作為連結字串--
        # Program.cs 程式片段 #
          var builder = WebApplication.CreateBuilder(args);
          if (builder.Environment.IsDevelopment())
          {
            builder.Services.AddDbContext<StoreContext>(options =>
              options.UseSqlite(builder.Configuration.GetConnectionString("StoreContext-Dev") ?? throw new InvalidOperationException("Connection string 'StoreContext-Dev' not found.")));
          }
          else
          {
            builder.Services.AddDbContext<StoreContext>(options =>
              options.UseSqlite(builder.Configuration.GetConnectionString("StoreContext-Prod") ?? throw new InvalidOperationException("Connection string 'StoreContext-Prod' not found.")));
          }
      
        <!-- dotnet run --environment Production doesn't change the environment
            variable ASPNETCORE_ENVIRONMENT. In development environments, when the 
            hosting environment is production the environment variable is development.
        -->

=佈署階段=
1. 先安裝 or 啟用Server 的IIS服務

2. 安裝 .NET Core 裝載套件組件 "Host ASP.NET Core on Windows with IIS"
https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-7.0#iis-configuration
  0. 下載 dotnet-hosting-7.0.4-win.exe 安裝檔
  1. 安裝前, 停用 "IIS服務"
  2. 安裝 the ASP.NET Core Module/Hosting Bundle(Microsoft .NET 7.0.4 Windows Server Hosting)
  3. 安裝後, 重啟 "IIS服務"
  
3. 發佈ASP.NET Core 網站至 IIS "Publish an ASP.NET Core app to IIS"
https://learn.microsoft.com/en-us/aspnet/core/tutorials/publish-to-iis?source=recommendations&view=aspnetcore-7.0&tabs=visual-studio

This tutorial covers the following subjects:
  1.Install the .NET Core Hosting Bundle on Windows Server.
  2.Create an IIS site in IIS Manager.
  3.Deploy an ASP.NET Core app.

  預先準備
    1. .NET Core SDK installed on the development machine. (OK)
    2. Windows Server configured with the Web Server (IIS) server role. 
      If your server isn't configured to host websites with IIS, 
      follow the guidance in the 
      IIS configuration section of the "Host ASP.NET Core on Windows with IIS" article 
      and then return to this tutorial.

  建立IIS網站
    1. 新增資料夾, 作為[發佈目的端資料夾], ex. C:\Projects\Projects_ASP.NET_Core\NET6_MvcShopping_website
    2. 在[IIS管理員]新增網站, 
      指定站台名稱[NET6_MvcShopping], 
      指定實體路徑[C:\Projects\Projects_ASP.NET_Core\NET6_MvcShopping_website],
      變更繫結連接埠, 例: [1722]. 註: 不要跟預設網站*.80衝突.
    3. 站台新增後[編輯權限], 在[安全性頁籤]給予 [IIS_IUSRS]群組允許 [讀取和執行], [列出資料夾內容], [讀取]的權限.

  建立ASP.NET Core 應用程式
    1. 應用程式路徑: C:\Projects\Projects_ASP.NET_Core\NET6_MvcShopping

  發佈及部署應用程式
    1. 步驟: 採用［資料夾］部署方式
      a. 應用程式發佈至［資料夾］
      b. 將［資料夾］內容移動至 [發佈目的端資料夾]
    
    2. 實作: 
      a. # (Bad) 產生 Web.config 設定檔 & 佈署所需檔案, 但沒有 "ASPNETCORE_ENVIRONMENT" 變數 #
            "dotnet publish --configuration Release"

         # (Better) 產生 Web.config 設定檔 & 佈署所需檔案, 指定 "ASPNETCORE_ENVIRONMENT" 變數值 "Production" #
            "dotnet publish /p:Configuration=Release /p:EnvironmentName=Production"

         # (最好方式) 產生 Web.config 設定檔 & 佈署所需檔案, 
              指定 "ASPNETCORE_ENVIRONMENT" 變數值 "Production", 
              直接輸出指定資料夾(覆蓋) #
            "dotnet publish /p:Configuration=Release /p:EnvironmentName=Production --force -o C:\Projects\Projects_ASP.NET_Core\NET6_MvcShopping_website"

    3. 注意:
      a. "dotnet publish" 指令 不會發佈 "測試用 Sqlite 檔".
      b. 如果想測試功能是否正常, 須自行將 "測試用 Sqlite 檔" 複製到 [正式環境].
      c. 正式環境會直接連上資料庫.
      
4.使用 dotnet 命令列工具發行 .NET 6 專案 <黑暗執行緒>
  https://blog.darkthread.net/blog/dotnet6-publish-notes/
