
=開發階段=
1.在 ASP.NET Core 中使用多個環境
  (以下內容僅適用於開發環境, )
  (正式環境的 {系統環境變數<environment variable>} 會寫在 "Web.config" 設定檔裡面)
  https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/environments?view=aspnetcore-7.0

    dotnet run --environment Production (直接在命令列上指定 "執行環境變數<hosting environment>", 但系統環境變數<environment variable> "ASPNETCORE_ENVIRONMENT" 值不會改變, 因為它是固定的. )
    dotnet run (未指定 "執行環境變數<hosting environment>", 啟動時抓 # launchSettings.json 系統環境變數<environment variable> #, 作為 "執行環境變數<hosting environment>")
    dotnet run or dotnet run --launch-profile "IIS Express" or dotnet run --launch-profile "IIS"
      IISExpress：啟動IIS Express。
      IIS ：未啟動網頁伺服器。 IIS 預期可供使用。
      Project ：啟動 Kestrel 。

      --[測試環境]的啟動設定值(註: 裡面可決定目前要讀取哪個環境變數..例: 開發, 測試..)
        # launchSettings.json 程式片段(launchSettings.json 只會在開發環境內使用, 正式環境吃的是 "Web.config") #
          "NET6_MvcShopping": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": true,
            "applicationUrl": "https://localhost:7184;http://localhost:5034",
            "environmentVariables": {
              "ASPNETCORE_ENVIRONMENT": "Development" //系統環境變數<environment variable>在這裡
            }

      --上述指令指定 執行環境變數<hosting environment>='Production' 來執行程式, 所以 builder 會使用 "StoreContext-Prod" 作為連結字串--
        # Program.cs 程式片段 #
          var builder = WebApplication.CreateBuilder(args);
          if (builder.Environment.IsDevelopment())
          {
            builder.Services.AddDbContext<StoreContext>(options =>
              options.UseSqlite(builder.Configuration.GetConnectionString("StoreContext-Dev") ?? throw new InvalidOperationException("Connection string 'StoreContext-Dev' not found.")));
          }
          else
          {
            builder.Services.AddDbContext<StoreContext>(options =>
              options.UseSqlite(builder.Configuration.GetConnectionString("StoreContext-Prod") ?? throw new InvalidOperationException("Connection string 'StoreContext-Prod' not found.")));
          }
      
        <!-- dotnet run --environment Production doesn't change the environment
            variable ASPNETCORE_ENVIRONMENT. In development environments, when the 
            hosting environment is production the environment variable is development.
        -->

=佈署階段=
1. 安裝 .NET Core 裝載套件組件 "Host ASP.NET Core on Windows with IIS"
	https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-7.0#iis-configuration
	https://learn.microsoft.com/en-us/aspnet/core/tutorials/publish-to-iis?source=recommendations&view=aspnetcore-7.0&tabs=visual-studio

	> 下載 dotnet-hosting-7.0.4-win.exe 安裝檔 (OK)
	> 安裝前, 停用 "IIS服務"，下指令 {iisreset /stop} (OK)
	> 安裝 the ASP.NET Core Module/Hosting Bundle(Microsoft .NET 7.0.4 Windows Server Hosting) (OK)
	> 安裝後, 重啟 "IIS服務" ，下指令 {iisreset /start} (OK)

2. 先安裝 or 啟用Server 的IIS服務(OK)
	
    > Run the installer on the IIS server. (OK)
  
3.建立IIS網站
    > 新增資料夾, 作為[發佈目的端資料夾], 例:  C:\Projects\WebSites\EFCore_RazorPage
    > 在[IIS管理員]新增網站, 
        指定站台名稱, 例: EFCore_RazorPage
        指定實體路徑, 例: C:\Projects\WebSites\EFCore_RazorPage
        變更繫結連接埠, 例: 8080, 不要跟預設網站*.80衝突即可
	
	# 資料夾新增執行權限 #
		> 一般作法: 
			a.站台新增後點選 [編輯權限]
			b.[安全性頁籤]給予 "Authenticated Users" 群組允許 [讀取和執行], [列出資料夾內容], [讀取]的權限.
		> 重視資安作法:
			a.站台新增後點選 [編輯權限]
			b.[安全性頁籤]給予 "IIS AppPool\<應用程式集區名稱>" 群組允許 [讀取和執行], [列出資料夾內容], [讀取]的權限.
				例: "IIS AppPool\EFCore_RazorPage"

4. Create an ASP.NET Core Razor Pages app
	https://learn.microsoft.com/en-us/aspnet/core/getting-started/?view=aspnetcore-7.0
		例: dotnet new webapp -o DeployTesting
		
5. Publish and deploy the app
	> Publish(發佈=編譯) an app means to produce a compiled app that can be hosted by a server. 
	> Deploy(佈署=放到IIS Server上) an app means to move the published app to a hosting system.
	
		註: 預設 builder.Environment 值給定 "Production" (正式環境)
			1.Program.cs 會讀取 與"Production" 相關設定
			2.使用 {appsettings.json} 的設定, 而非 {appsettings.Development.json} 設定檔
			3.產生 Web.config & 編譯所需檔案
			4.{待佈署檔案} 寫至預設路徑 { bin/Release/{TARGET FRAMEWORK}/publish } 
			5.移動 {待佈署檔案} 至IIS網站的實體路徑下. 
		
		注意:
			a. "dotnet publish" 指令 不會發佈 "測試用 Sqlite 檔".
			b. 如果想在[正式環境]使用[Sqlite 檔], 自行複製過去.
			c. 一般而言, [正式環境]會連上資料庫, 不會使用 [Sqlite 檔]
		
		a. dotnet publish --configuration Release 
			#方式一: 發佈預設資料夾
			
		b. dotnet publish /p:Configuration=Release /p:EnvironmentName=Production 
			#方式二: 給定環境名稱(開發, 測試, 正式)
			https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/environments?view=aspnetcore-7.0 (在 ASP.NET Core 中使用多個環境)
			
			註: 發佈至不同環境時使用, 就像台半有兩台.35(Testing) & .36(Production)機器, 才會這麼玩.
				1.EnvironmentName的預設值
					> Development： launchSettings.json 檔案會在本機電腦上設定 ASPNETCORE_ENVIRONMENT 為 Development 
					> Staging
					> Production：如果 DOTNET_ENVIRONMENT 和 ASPNETCORE_ENVIRONMENT(設定在系統上的全域變數) 尚未設定，則為預設值

        c. dotnet publish /p:Configuration=Release --force -o "指定輸出路徑(覆蓋)"
			#方式三: 發佈指定輸出路徑
			例: 
				dotnet publish /p:Configuration=Release --force -o "C:\Projects\WebSites\EFCore_RazorPage"
		    
6. 佈署後Browse the website, 出現錯誤訊息為  HTTP Error 500.30  怎麼辦?
	https://marcus116.blogspot.com/2019/05/netcore-aspnet-core-http-error-50030.html    
	
	> 修改 Web.config, 
		開啟 stdoutLogEnabled="true", 預設是關閉的, 
		stdoutLogFile=".\logs\stdout", 異常log檔存放路徑.
  
4.使用 dotnet 命令列工具發行 .NET 6 專案 <黑暗執行緒>
  https://blog.darkthread.net/blog/dotnet6-publish-notes/
