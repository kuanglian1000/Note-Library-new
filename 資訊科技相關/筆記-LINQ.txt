資料來源: LINQ設計模式 using C# 4 / Troy Magennis著 / 曹紋蓮譯

CH02 - LinqToObject
  測試專案路徑 => C:\Projects_C#\Linq\CH2-LinqToObject\Program.cs

  # 擴充方法(C# 3.0 新增)

    * 定義擴充方法的規則
      1. 擴充方法必須被定義在靜態類別內(static class xxx)
      2. 這個靜態類別必須在<指定命名空間>的最底層(註: 不能放其他類別裡.)
      3. 擴充方法必須是靜態方法
      4. 擴充方法的第1個參數必須以 this 開頭, 代表被擴充的類別

    * 擴充方法的使用時機, 它相較於個體方法而言, 是比較受限於它的功能及不易被重視.
        建議 => 當個體方法無法完成時, 再使用擴充方法.

    * 範例: 在System.String類別內, 擴充2個方法 CreateHyperlink & GetSHA256Hash
      任何有 using <指定命名空間> 類別檔案, 都能在字串上使用 CreateHyperlink & GetSHA256Hash 方法

        //使用方式
        using TestNameSpace;
        string s = "abc";
        Console.WriteLine(s.CreateHyperLink("http://www.ntut.edu.tw"));
        Console.WriteLine(s.GetSHA256Hash());

        //新增類別
        using System.Security.Cryptography;
        using System.Text;

        namespace TestNameSpace
        {
          public static class ExtentedClass
          {
            // With Optional Parameter
            public static string CreateHyperLink(this string text , string url)
            {
              return $"<a href='{url}'>{text}</a>";
            }

            // Without Optional Parameter
            public static string GetSHA256Hash(this string text)
            {
              if(string.IsNullOrEmpty(text))
                return "error..";
              else
              {
                SHA256 sha256Hash = SHA256.Create();
                //SHA1Managed sha1 = new SHA1Managed();
                byte[] bytes = sha256Hash.ComputeHash(new UnicodeEncoding().GetBytes(text));
                return Convert.ToBase64String(bytes);
              }
            }
          }
        }

  # 物件初始化方式-單行敘述(C# 3.0 新增)
    //舊的初始化方式 => 多行
    Contact contactOld = new Contact();
    contactOld.LastName = "KL";
    contactOld.DateOfBirth = new DateTime(1979, 9, 16);

    //新的初始化方式 => 單行
    Contact contactNew = new Contact{
      LastName = "Judy",
      DateOfBirth = new DateTime(1980, 12,24)
    };

  # 集合初始化方式-單行敘述(C# 3.0 新增)

    //舊的初始化方式(集合) => 多行
    List<string> stringOld = new List<string>();
    stringOld.Add("str1");
    stringOld.Add("str2");

    //新的初始化方式(集合) => 單行
    List<string> stringNew = new List<string>{
      "str3",
      "str4"
    };

    //物件 + 集合 => 單行
    List<Contact> lists = new List<Contact>{
      new Contact{
        LastName = "Jason",
        DateOfBirth = new DateTime(1981, 2, 9)
      },
      new Contact{
        LastName = "Sherry",
        DateOfBirth = new DateTime(1983, 5, 19)
      }
    };

  # 隱含型別的區域變數(var) => 它會從初始化表達(=的右側)或初始值指派, 推測其型別

    var anInt = 1;
    var aString = "test";
    var listcontact = new List<Contact>();
    var intArray = new int[] {1,2,3,4,5};
    var lists = new List<Contact>{
        new Contact{
          LastName = "Jason",
          DateOfBirth = new DateTime(1981, 2, 9)
        },
        new Contact{
          LastName = "Sherry",
          DateOfBirth = new DateTime(1983, 5, 19)
        }
      };    

  # 匿名型別(new {}, new[] {}, ..) => 沒有型別的暫時型別, 它必須搭配 (var) 一起宣告.

    //annoymous type
    var item = new {Name = "Toyota", Price = 9989};
    Console.WriteLine($"Type: {item.GetType().ToString()} , Name: {item.Name} , Price: {item.Price}");

    //annoymous array type
    var list = new[] {
      new {Name = "Toyota", Price = 9989},
      new {Name = "Benz", Price = 15000},
      new {Name = "Suzuki", Price = 9975};
    };

    foreach(var item in list)
      Console.WriteLine($"Car Brand:{item.Name} , Price:{item.Price}");
      
  # Lambda表達式 => 簡化 C# 2.0 委派(delegate)的寫法. 
    註: 委派 = 對函式或方法的安全型別參考.
    註: <程式碼>在使用者點下按鈕時執行, 就是在'按鈕事件'中附加一個委派, 而委派就是<參考到指定程式碼>的動作.

    source.Where(delegate(Contact c) {return c.State == "WA";} ); //C# 2.0

    [parameter] => [expression]
    source.where(c => c.State == "WA"); //C# 3.0 之後, 省略delegate & return

    () => [expression]
    ([parameter]) => [expression] //大部分的Lambda表達式, 會推測參數及回傳值型別.
    ([param type] [parameter]) => [expression]
    ([param-1] [param-2]) => [expression]
    ([param-1 type] [param-1], [param-2 type] [param-2]) => [expression]

    n => n < 5
    (int n) => n < 5
    n => n % 2 == 1
    (n, index ) => n < index

    //程式寫法

    1. 連結程式碼至<按下按鈕事件>
      Button button = new Button();
      
      //匿名方法(C# 2.0 delegate)
      button.Click += delegate(object sender , EventArgs args)
      {
        MessageBox.Show("Clicked..");
      }

      //Lambda表達式(C# 3.0 =>)
      button.Click += (object sender , EventArgs args) => MessageBox.Show("Clicked..");

    2. 連結程式碼至<ForEach方法>
      var data = Contact.SampleData().ToList();

      //匿名方法(C# 2.0 delegate)
      data.ForEach(delegate(Contact c) {c.LastName = c.LastName.ToUpper(); }); //轉換為大寫

      //Lambda表達式(C# 3.0 =>)
      data.ForEach( c => c.LastName = c.LastName.ToUpper(); ); //轉換為大寫

      data.ForEach( c => Console.WriteLine($"LastName:{c.LastName}, FirstName:{c.FirstName}"); ); //顯示全名

    3. 傳遞程式碼至<LINQ 擴充方法> <= 擴充方法會return something.

      //匿名方法(C# 2.0 delegate)      
      var q1 = data.Where(delegate(Contact c) {return c.State == "WA"; });

      //Lambda表達式(C# 3.0 =>)
      var q2 = data.Where(c => c.State == "WA");

  # 查詢表達式 => 只適用於LinqToObject, LinqToSQL 不是採這個方式; 
  查詢表達式 & Lambda表達式 都要會且看的懂, 而且兩者可合在一起用.

    範例: 產生資料檔:
      namespace TestNameSpace
      {
        public static class People
        {
          public static List<Person> SampleData()
          {
            List<Person> list = new List<Person>{
              new Person {State = "WA", FirstName = "鄭", LastName ="小量"},
              new Person {State = "台南", FirstName = "楊", LastName ="天空"},
              new Person {State = "WA", FirstName = "陳", LastName ="小美"},
              new Person {State = "台北", FirstName = "任", LastName ="小星"},
              new Person {State = "WA", FirstName = "周", LastName ="小志"},
            };
            return list;
          }
        }

        public class Person
        {
          public string? State{get;set;}
          public string? FirstName{get;set;}
          public string? LastName{get;set;}
        }
      }

    範例: 查詢表達式 & Lambda表達式
    // LINQ 查詢表達式寫法
    var query1 = from c in People.SampleData()
      where c.State == "WA"
      select new {
        Name = c.FirstName + " " + c.LastName,
        State = c.State
      };

    // LINQ Lambda表達式 + 擴充方法 寫法
    var query2 = People.SampleData()
      .Where(c => (c.State ?? "").Contains("台")) //解決問題: 若為NULL值, 則給"", 再判斷是否含"台"
      .Select(c => new {
        Name = c.FirstName + " " + c.LastName,
        State = c.State
      });

    foreach (var item in query1)
      Console.WriteLine($"{item.Name} lives in {item.State}");

    foreach (var item in query2)
      Console.WriteLine($"{item.Name} lives in {item.State}");

  # LinqToObject 的 5分鐘概要
    1. LINQ讓程式員不用再寫迴圈, 就能在內存集合上進行資料運算.

    //簡易LINQ查詢範例
      int[] nums = new int[] {0, 4 , 7, 8, 9, 1, 3, 4};
      var result = from n in nums
        where n < 5
        orderby n
        select n;
      foreach(var i in result)
        Console.WriteLine(i);

      int SumOfNums =nums.Sum();
      Console.WriteLine($"Sum is {SumOfNums}");

    //複雜LINQ查詢範例(兩個集合) Contacts & CallLogs

    /*準備資料*/ => C:\Projects_C#\Linq\CH2-LinqToObject\DefineSampleData.cs

    2. 實作: (使用 where & orderby) 找出未滿35歳的聯絡人, 並從年紀最長的開始排列(Contacts) 
      => C:\Projects_C#\Linq\CH2-LinqToObject\Program.cs

      List<Contact> contacts = Contacts.SampleData();
      var contactsUnder35Years = from c in contacts
              where c.DateOfBirth.AddYears(35) > DateTime.Now //目前時間為0, 若+35大於0則表示小於35歳. 因為大於35歳會 <35以上而且會愈來愈小.
              orderby c.DateOfBirth descending //由大至小排序
              //orderby c.DateOfBirth //預設是由小至大排序
              select $"DateOfBirth:{c.DateOfBirth.ToString("yyyy/MM/dd")},  {c.FirstName} {c.LastName} " ;

      foreach(var i in contactsUnder35Years)
        Console.WriteLine(i);

    3. 實作: (使用 group X by X.Y) 依聯絡人區域分群, group 之後會產生 key值, select 可自訂分群結果.

      List<Contact> contacts_2 = Contacts.SampleData();
      var contactGroupByState = from c in contacts_2
            group c by c.State;

      foreach (var g in contactGroupByState)
      {
        Console.WriteLine($"State:{g.Key}");
        foreach (var item in g)
        {
          Console.WriteLine($" FirstName:{item.FirstName} / LastName:{item.LastName}");
        }
      }

    4. 實作: (使用 join on equals) 依電話號碼將兩集合聯結的查詢 
    [LINQ => 不要用大量聯結, 效率很差.]

      List<Contact> contacts_join = Contacts.SampleData();
      List<CallLog> calllogs_join = CallLogs.SampleData();

      var q = from call in calllogs_join
        join contact in contacts_join
        on call.Number equals contact.Phone
        select new {
          contact.FirstName,
          contact.LastName,
          call.When,
          call.Duration
        };

      foreach (var item in q)
        Console.WriteLine($"{item.When.ToString("MMMdd HH:mm")} - {item.FirstName} {item.LastName} ({item.Duration} min)");

    5. 實作: (使用 where, orderby, group x by x, join on equals, select) 展示所有LINQ關鍵字, 並使用彙總函數的查詢

      List<Contact> contacts_all = Contacts.SampleData();
      List<CallLog> calllogs_all = CallLogs.SampleData();

      var summary = from call in calllogs_all
        where call.Incoming == true
        group call by call.Number into g
        join contact in contacts_all on g.Key equals contact.Phone
        orderby contact.FirstName , contact.LastName
        select new {
          contact.FirstName,
          contact.LastName,
          Count = g.Count(),
          Avg = g.Average(c => c.Duration),
          Total = g.Sum(c => c.Duration)
        };

      foreach (var item in summary)
      {
        Console.WriteLine($"{item.FirstName} {item.LastName} - Calls:{item.Count}, Time:{item.Total} mins, Avg:{item.Avg}");
      }

CH03 - 撰寫基本查詢
  測試專案路徑 => C:\Projects_C#\Linq\CH2-LinqToObject\Program.cs

  # 【選擇查詢語法方式】<撰寫方式>有:
    a. 擴充方法式(.出來的方法 + Lambda表達式)
    b. 查詢表達式(類似SQL COMMAND)
    c. 查詢表達式 + 擴充方法式 (只要查詢表達式回傳 IEnumerable<T>結果, 再加上1個括號後就能點出擴充方法鍊)
    
    [注意1]: 盡可能使用查詢表達式, 比較好理解; 只有在查詢表達式不支援的運算子時, 才使用擴充方法式(例: Distinct())在最後面加上.
    [注意2]: 完全使用擴充方法式, 當查詢內沒有JOIN OR GROUPBY 時

    int[] nums = new int[]{0,4,5,2,6,8,3,1};

    a. var result1 = nums
        .Where(n => n < 5)
        .OrderBy(n => n);

    b. var result2 = from n in nums 
        where n < 5
        orderby n
        select n;

    c. var result3 = (from n in nums
        where n < 5
        orderby n
        select n).Distinct(); //排除重覆

  # 查詢表達式語法

    IEnumerable<T> = 
      from [identifier] in [expression 主資料表]
      let (可選) [identifier] = [expression]
      where (可選) [bool-expression 回傳TRUE OR FALSE]
      join (可選) [identifier] in [expression 連接資料表] on [expression 主資料表-連結欄位] equals [expression 連接資料表-連結欄位]
      orderby (可選) 排序依據 ascending(預設可不加)|descending(必須加)
      group (可選) [expression 對象] by [expression 群組依據] into (可選) [identifier]
      select [expression] into (可選) [identifier]

  # let - 建立區域變數(儲存中繼計算或子查詢結果, 只計算1次)

    int[] source = new int[] {0,2,4,6,8};
    var variance = from element in source
                   let average = source.Average()
                   select Math.Pow((element - average), 2); //2平方
    foreach(var item in variance)
      Console.WriteLine(item);

  # into - 查詢的延續(儲存中繼計算或子查詢結果, 最常用於 group x by x into groups)

    int[] sourceInto = new int[] {0,0,0,0,1,2,2,2,4,6,7,7,8};
    var groupings = from element in sourceInto
                    group element by element into groups
                    select new { Key = groups.Key,
                                 Count = groups.Count()};
    foreach(var item in groupings)
      Console.WriteLine($"{item.Key} 有 {item.Count} 個");

  # 比較查詢語法的選擇

    a. 擴充方法式語法的使用小技巧
      > 先寫最受限制的查詢方法, 減少後續運算子工作負載 (同SQL COMMAND概念)
      > 將每個運算子分開至不同行, 便於除錯
      > 在同一應用程式內, 只使用一種方法
      > 讓查詢更易讀, 可分段, 可縮排

    b. 查詢表達式語法的使用小技巧
      > 如須混合使用擴充方法式語法及查詢表達式語法, 建議把擴充方法式放在查詢表達式的(最後).
      > 將每個查詢表達式分開至不同行, 便於除錯

  # 【過濾結果(Where 指令)】

  【改變回傳型別】

  【回傳序列元素(Select Many)】

  【得到結果的索引位置】

  【移除重複結果】

  【排序結果】
