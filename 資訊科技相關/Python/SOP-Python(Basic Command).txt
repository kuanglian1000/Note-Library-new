學習資源: https://www.w3schools.com/python/python_intro.asp

Python Introduction

  Python Syntax compared to other programming languages(Python與其他程式語言的差異)

    Python was designed for readability, and has some similarities to the English language with influence from mathematics.
    Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.
      (使用換行來完成一行指令, 而不是分號[;])
    Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.
      (使用縮排及空白來定義範圍, 而不是大括號{})

Python Getting Started

    Python Install
      C:\Users\Your Name>python --version
      (確認是否安裝的指令)
      output => Python 3.8.7

    > PowerShell 取得目前路徑
        Get-Location

    > PowerShell 切換路徑
        Set-Location -Path C:\Windows -PassThru
        (切換至 C:\Windows 路徑, -PassThru => 顯示切換後路徑)
        Set-Location -Path C:\Windows
        (切換至 C:\Windows 路徑, 無顯示切換後路徑)

Python Syntax
  > Execute Python Syntax
    1. >>> print("Hello, World!")
    2. C:\Users\Your Name>python myfile.py

  > Python Indentation(縮排)
    1.Indentation refers to the spaces at the beginning of a code line.(程式碼前面的空白)
    2.Where in other programming languages the indentation in code is for readability only, 
      the indentation in Python is very important.
    3.Python uses indentation to indicate a block of code.(Python使用縮排決定程式碼的段落)

    if 5 > 2:
      print("5 is grater than 2")
  
Python Comments
  1.Comments start with a [#], and Python will render the rest of the line as a comment: 

    #This is a comment.
    print("Hello, World!")

  2.Multiline Comments

    方式(1).使用多個 [#]
    #This is a comment
    #written in
    #more than just one line
    print("Hello, World!")

    方式(2).使用未指定給變數的字串值, 因為Python會忽略未指定給變數的字串, 必須以 ['''] or ["""]包起來.

    '''我是多行註解1
    我是多行註解2
    我是多行註解3
    '''

    """我是多行註解1
    我是多行註解2
    我是多行註解3
    """

Python Variables
  1.In Python, variables are created when you assign a value to it: (第1次指定值時, 變數才會產生)
  2.Python has no command for declaring a variable.(Python沒有宣告的變數的指令)
  3.Variables do not need to be declared with any particular type, 
    and can even change type after they have been set.
    (變數毋須指定型態, 而且設定值後仍可改變型態)
  4.If you want to specify the data type of a variable, this can be done with casting.
    (變數可以指定型態, 使用[轉型函式])
  5.You can get the data type of a variable with the [type()] function.
    (可以利用 type() 函式, 取得變數型態)
  6.String variables can be declared either by using single or double quotes:
    (字串變數可以用 '' or "" 宣告)
  7.Variable names are case-sensitive.
    (變數名稱區分大小寫)
  8.Multi Words Variable Names
    (多字變數名稱-命名建議)

    Python - Variable Names(變數命名規則)    
      a.A variable name must start with a letter or the underscore character
        (必須以英文字母或底線開頭)
      b.A variable name cannot start with a number
        (不能以數字開頭)
      c.A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
        (只能包含英文字母+數字+底線)
      d.Variable names are case-sensitive (age, Age and AGE are three different variables)
        (區分大小寫)
      e.A variable name cannot be any of the Python keywords.
        (不能是Python保留字)

  9.Python Variables - Assign Multiple Values
  (一值指定多變數, 多值指定多變數, 拆集合值指定多變數[unpacking])
    範例: 參照Practices\helloworld.py => line: 19-42

  10.Python - Output Variables
  (The best way to output multiple variables in the print() function 
  is to separate them with [commas], which even support different data types:
  print(int,str,float,..)使用逗號來結合, 支援不同資料型態)

    a.The Python print() function is often used to output variables.
      x = "Python is awesome"
      print(x)
    b.In the print() function, you output multiple variables, separated by a [comma]: #以逗號分隔
      x = "Python"
      y = "is"
      z = "awesome"
      print(x, y, z)
    c.You can also use the [+] operator to output multiple variables: #以加號分隔
      x = "Python"
      y = "is"
      z = "awesome"
      print(x + y + z)
    
    d. [注意] 使用print()時, 不能用 [+] 把字串和數字結合, 但可以用 [,] 把字串和數字結合
      # OK
      x = "Buy " 
      y = 5 
      z = "apples"
      print(x, y, z)

      # Error, 使用print()時, 不能用 + 把字串和數字結合, 但可以用 [,] 把字串和數字結合
      # x = "Buy " 
      # y = 5 
      # z = "apples"
      # print(x + y + z)

  11.Python - Global Variables
    a.Variables that are created outside of a function (as in all of the examples above) are known as global variables.
    b.Global variables can be used by everyone, both inside of functions and outside.
      (全域變數能被函式內外使用)
      x = "awesome"
      def myfunc():
        print("Python is " + x)
      myfunc() #Python is awesome

    c.If you create a variable with the same name inside a function, this variable will be local, 
      and can only be used inside the function. 
      The global variable with the same name will remain as it was, 
      global and with the original value.
      (全域變數與區域變數同名時, 並不會互相干擾)
      x = "awesome"
      def myfunc():
        x = "fantastic"
        print("Python is " + x) # x => fantastic

      myfunc()
      print("Python is " + x) # x => awesome      

    d.The [global] Keyword, (1)使區域變數變成全域變數, (2)全域變數變成函式內區域變數使用
    (1)使區域變數變成全域變數
      def myfunc():
        global x
        x = "fantastic"
      myfunc()
      print("Python is " + x) 

    (2)全域變數變成函式內區域變數使用
      x = "awesome"
      def myfunc():
        global x
        x = "fantastic"

      myfunc()
      print("Python is " + x) 
    

  x = 5 #變數毋須指定型態
  x = "change to string" #設定值後仍可改變型態
  y = "hello World"

  a = str(3) # a will be '3'
  b = int(3) # b will be 3
  c = float(3) # c will be 3.0

  print(type(a)) # <class 'str'>
  print(type(b)) # <class 'int'>
  print(type(c)) # <class 'float'>

  myVariableName = "John" #Camel Case
  MyVariableName = "John" #Pascal Case
  my_variable_name = "John" #Snake Case

Python Data Types

  > Built-in Data Types
    * Text Type: 	str
    * Numeric Types: 	int, float, complex => 1j
    * Sequence Types: 	list => [] , tuple => () , range => range(5)
    * Mapping Type: 	dict => {index: value}
    * Set Types: 	set => {} , frozenset => {}
    * Boolean Type: 	bool
    * Binary Types: 	bytes, bytearray, memoryview
    * None Type: 	NoneType

  > Getting the Data Type
    x = 5 
    print(type(x))

  > Setting the Data Type
    In Python, the data type is set when you assign a value to a variable:
    (給值時, 再決定變數型態)

    x = "Hello World" 	str 	
    x = 20 	int 	
    x = 20.5 	float 	
    x = 1j 	complex 	
    x = ["apple", "banana", "cherry"] 	list 	
    x = ("apple", "banana", "cherry") 	tuple 	
    x = range(6) 	range 	
    x = {"name" : "John", "age" : 36} 	dict 	
    x = {"apple", "banana", "cherry"} 	set 	
    x = frozenset({"apple", "banana", "cherry"}) 	frozenset 	
    x = True 	bool 	
    x = b"Hello" 	bytes 	
    x = bytearray(5) 	bytearray 	
    x = memoryview(bytes(5)) 	memoryview 	
    x = None 	NoneType

  > Setting the Specific Data Type
    If you want to specify the data type, you can use the following constructor functions:
    (給值時, 使用轉型函式決定變數型態)
    (注意: 無法指定 NoneType, 只要給 None 值即可)

    x = str("Hello World") 	str 	
    x = int(20) 	int 	
    x = float(20.5) 	float 	
    x = complex(1j) 	complex 	
    x = list(("apple", "banana", "cherry")) 	list 	
    x = tuple(("apple", "banana", "cherry")) 	tuple 	
    x = range(6) 	range 	
    x = dict(name="John", age=36) 	dict 	
    x = set(("apple", "banana", "cherry")) 	set 	
    x = frozenset(("apple", "banana", "cherry")) 	frozenset 	
    x = bool(5) 	bool 	
    x = bytes(5) 	bytes 	
    x = bytearray(5) 	bytearray 	
    x = memoryview(bytes(5)) 	memoryview

Python Numbers
  > Python Numbers
    There are three numeric types in Python:
    
    int
    float
    complex

  > Int (不限長度整數)
    Int, or integer, is a whole number, positive or negative, 
    without decimals, 
    of unlimited length.

    x = 1
    y = 35656222554887711
    z = -3255522

  > Float (浮點數)
    Float, or "floating point number" is a number, positive or negative, 
    containing one or more decimals.(包含一個或多個小數點下值)
    Float can also be scientific numbers with an "e" to indicate the power of 10.
    (可以利用 'e' or 'E' 決定10的次方)

    x = 1.10
    y = 1.0
    z = -35.59

    x = 35e3
    y = 12E4
    z = -87.7e100

  > Complex (複雜數) + 加上 "J" 表示未知/假想.
    Complex numbers are written with a "j" as the imaginary part:

  > Type Conversion (轉型函式)
    a.You can convert from one type to another with the [int(), float(), and complex()] methods:
    b.注意: Note: You cannot convert complex numbers into another number type.
      (不能將 complex numbers 轉為其他數值類型.)

  > Random Number (亂數)
    a.Python [does not have a random() function] to make a random number, 
      but Python has a built-in module called [random] that can be used to make random numbers:

      import random #引用 random 函式庫

      print(random.randrange(1,100))

Python Casting
  > Specify a Variable Type(使用資料型態建構子, 每個資料型態都是一種類別)
      
      Casting in python is therefore done using constructor functions:
        int() - constructs an integer number from an integer literal, a float literal (by removing all decimals), or a string literal (providing the string represents a whole number)
        float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)
        str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals

      x = int(1)   # x will be 1
      y = int(2.8) # y will be 2 #float轉int, 會去尾數
      z = int("3") # z will be 3

      x = float(1)     # x will be 1.0
      y = float(2.8)   # y will be 2.8
      z = float("3")   # z will be 3.0
      w = float("4.2") # w will be 4.2

      x = str("s1") # x will be 's1'
      y = str(2)    # y will be '2'
      z = str(3.0)  # z will be '3.0' 

==2023/11/11==

Python Strings
  > Strings
    1.Strings in python are surrounded by either single quotation marks['], or double quotation marks["].
    2.'hello' is the same as "hello".
    3.Examples
      print('hello')
      print("hello")

  > Assign String to a Variable
    1.Assigning a string to a variable is done with the variable name followed by an equal sign and the string:
    2.Examples
      name = "kl"
      print(name)

  > Multiline Strings (use '''xxx''' or """XXX""")
    1.You can assign a multiline string to a variable by using three quotes: [''']or["""]
    2.(會保留換行符號)
    3.Examples
      mnames = '''1.koko
      2.jojo
      3.wowo'''
      print(mnames)

  > Strings are Arrays (字串是單字串陣列)
    1.Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.
      (字串是字元陣列)
    2.Python does not have a character data type, a single character is simply a string with a length of 1.
      (Python沒有字元型態, 所以字元被視為長度1的字串)
    3.Examples
      city = "ILian"
      print(city[1]) #Output => "L"

  > Looping Through a String
    1.Since strings are arrays, we can loop through the characters in a string, with a for loop.
    2.Examples
      for s in city:
        print(s)

  > String Length (len())
    1.To get the length of a string, use the [len()] function.
    2.Examples
      city = "ILian"
      print(len(city)) #Output => 4

  > Check String (檢查字串內是否有特定字串, 使用關鍵字 [in] )
    1.To check if a certain phrase or character is present in a string, we can use the keyword [in].
    2.Examples
      Question = "How many animals in this zoo? 25 36 95"
      print("10" in Question) # Output is False
      print("36" in Question) # Output is True

      if ("36" in Question): #Use "Check String" in if statement
        print("Yes, '36' 存在..")

  > Check if NOT (檢查字串內是否有特定字串, 使用關鍵字 [not in] )
    1.To check if a certain phrase or character is NOT present in a string, we can use the keyword [not in].
    2.Examples  
      Question = "How many animals in this zoo? 25 36 95"
      print("10" not in Question) # Output is True
      print("36" not in Question) # Output is False


    3.

  > Slicing Strings (同C# => substring, Python => variableName[startIndex: endIndex] => startIndex起, endIndex不含)
    1.You can return a range of characters by using the slice syntax.
    2.examples
      word = "sample"
      print(word[3:]) #ple
      print(word[3:5]) #pl
  
  > Slice From the Start (沒有給起始索引 variableName[: endIndex])
    2.examples
      word = "sample"
      print(word[:3]) #sam
      
  > Slice To the End (沒有給結尾索引 variableName[startIndex: ])
    2.examples
      word = "sample"
      print(word[4:]) #le

  > Negative Indexing (從字串結尾往回截)
    1. Use negative indexes to start the slice from the end of the string: 
    2.(注意: 0是字串開頭, 所以-1是字串結尾, 這點要注意...)
    2.examples
      word = "I am ready to work in taipei."
      print(word[-7:-1]) #taipei

  > Modify Strings (字串內建函式)
    1.Upper Case
      word.upper()
    
    2.Lower Case
      word.lower()
    
    3.Remove Whitespace(移至前後空白, 同C# trim())
      word.strip()
    
    4.Replace String
      word.replace("H", "J")
    
    5.Split String(回傳LIST[])
      word = "I live in ILian"
      print(word.split(" "))

  > String Concatenation (字串連結, 使用 [+] 作連結)
    1.To concatenate, or combine, two strings you can use the [+] operator.
      a = 'Hello'
      b = ' World'
      c = a + b
      print(c) #Output => Hello World

  > Format - Strings (字串格式化)
    1.we cannot combine strings and numbers by [+]
      (字串與數值間, 不能直接用 [+] 結合)
    2.But we can combine strings and numbers by using the [format()] method!
      (字串與數值間, 可以用 [format()] 結合)
      (注意: 沒有很直覺, 感覺不是很好用..)
      age = 43
      txt = "I am {}"
      print(txt.format(43))
    3.The format() method takes [unlimited number of arguments], and are placed into the respective placeholders:
      [format()的參數個數不限.]
      quantity = 3
      itemno = 567
      price = 49.95
      myorder = "I want {} pieces of item {} for {} dollars."
      print(myorder.format(quantity, itemno, price))
    4.You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:
      (注意: 指定index值, 確認放在哪一個位置)
      quantity = 3
      itemno = 567
      price = 49.95
      myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
      print(myorder.format(quantity, itemno, price))
  
  > Escape Characters (跳脫字元, 使用 [\], 和C#一樣)
      txt = "We are the so-called "Vikings" from the north."   # (Error)
      txt = "We are the so-called \"Vikings\" from the north." # (OK)

  > String Methods (所有內建函式都會回傳新值, 不會改變原字串)

Python Booleans
  1.Booleans represent one of two values: [True] or [False].

  > Boolean Values

  > Evaluate Values and Variables
    1.The [bool()] function allows you to evaluate any value, 
      and give you [True] or [False] in return,
    
    print(bool("Hello")) # True
    print(bool(15))      # True

  > Most Values are True
    Almost any value is evaluated to True if it has some sort of content.
    Any string is True, except empty strings. # 空字串是 False
    Any number is True, except 0.             # 0是 False
    Any list, tuple, set, and dictionary are True, except empty ones. # 空集合是 False

  > Some Values are False
    1.except empty values, such as (), [], {}, "", 
    2.the number 0
    3.the value None
    4.the value False evaluates to False
    5.Examples, 評估出來都是 False
      bool(False)
      bool(None)
      bool(0)
      bool("")
      bool(())
      bool([])
      bool({})
    
    6.(還有一種情況會評為False 
      => if you have an object that is made from a class with a __len__ function 
      that returns 0 or False: )
      
      class myclass():
        def __len__(self):
          return 0

      myobj = myclass()
      print(bool(myobj)) # 評估結果是 False
  
  > Functions can Return a Boolean (函式可回傳 Boolean)
    * Examples-1
        def myFunction() :
          return True

        print(myFunction()) 

    * Examples-2
        if myFunction():
          print("Yes")
        else
          print('No')

    * Examples-3 => Python also has many built-in functions that return a boolean value, 
        like the [isinstance()] function, 
        which can be used to determine if an object is of a certain data type:

        x = 200
        print(isinstance(x, int)) #Output is True

==2023/11/12==

Python Operators

Python Lists

==2023/11/13==
